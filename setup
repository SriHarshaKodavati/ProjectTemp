# Loan Application System - Frontend & Backend Integration

This is a complete loan application system with React frontend and Spring Boot backend integration.

## Project Structure

```
loan-application-system/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── LoanApplicationForm.jsx
│   │   │   ├── HeaderLoggedIn.jsx
│   │   │   └── FooterLoggedIn.jsx
│   │   ├── style/
│   │   │   └── LoanApplicationForm.css
│   │   └── App.js
│   └── package.json
└── backend/
    ├── src/main/java/com/scb/Loan_Origination/Loan_Origination/
    │   ├── controller/
    │   │   └── LoanApplicationController.java
    │   ├── service/
    │   │   └── LoanApplicationService.java
    │   ├── model/
    │   │   ├── LoanApplication.java
    │   │   ├── PersonalDetails.java
    │   │   ├── EmploymentDetails.java
    │   │   ├── LoanDetails.java
    │   │   ├── DocumentDetails.java
    │   │   ├── ExistingLoanDetails.java
    │   │   └── ReferenceDetails.java
    │   ├── repository/
    │   │   └── LoanApplicationRepository.java
    │   └── config/
    │       └── WebConfig.java
    ├── src/main/resources/
    │   └── application.properties
    └── pom.xml
```

## Prerequisites

- Java 17 or higher
- Node.js 16+ and npm
- MySQL 8.0+ (or H2 for development)
- Maven 3.6+

## Backend Setup

### 1. Database Setup

#### Using MySQL:
```sql
-- Create database
CREATE DATABASE loan_origination_db;

-- Create user (optional)
CREATE USER 'loan_user'@'localhost' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON loan_origination_db.* TO 'loan_user'@'localhost';
FLUSH PRIVILEGES;
```

#### Using H2 (for development):
Update `application.properties`:
```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
```

### 2. Application Configuration

Update `src/main/resources/application.properties`:
```properties
# Database Configuration (MySQL)
spring.datasource.url=jdbc:mysql://localhost:3306/loan_origination_db
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Server Configuration
server.port=8080

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
```

### 3. Maven Dependencies

Ensure your `pom.xml` includes:
```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <scope>runtime</scope>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
```

### 4. Run Backend

```bash
cd backend
mvn clean install
mvn spring-boot:run
```

The backend will start on `http://localhost:8080`

## Frontend Setup

### 1. Install Dependencies

```bash
cd frontend
npm install
```

### 2. Required Dependencies

Add to `package.json` if not present:
```json
{
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "axios": "^1.4.0"
  }
}
```

### 3. Environment Configuration

Create `.env` file in frontend directory:
```env
REACT_APP_API_BASE_URL=http://localhost:8080/api
```

### 4. Run Frontend

```bash
npm start
```

The frontend will start on `http://localhost:3000`

## API Endpoints

### Application Management
- `POST /api/applications/create` - Create new application
- `GET /api/applications/{id}` - Get application by ID
- `PUT /api/applications/{id}` - Update application status

### Section-specific Endpoints
- `POST /api/applications/{id}/personal-details` - Save personal details
- `POST /api/applications/{id}/employment-details` - Save employment details
- `POST /api/applications/{id}/loan-details` - Save loan details
- `POST /api/applications/{id}/document-details` - Save document details
- `POST /api/applications/{id}/existing-loan-details` - Save existing loan details
- `POST /api/applications/{id}/reference-details` - Save reference details

## Key Features

### Frontend Features:
- Multi-step form with progress tracking
- Real-time validation
- File upload functionality
- Section-wise data saving
- Edit capability from review page
- Responsive design

### Backend Features:
- RESTful API design
- JPA/Hibernate ORM
- Automatic database schema generation
- CORS configuration
- Error handling
- Data persistence with MySQL

## Data Flow

1. **Application Creation**: Frontend creates a new application and receives an application ID
2. **Step-by-Step Saving**: Each form section is saved independently via API calls
3. **Validation**: Both frontend and backend validation
4. **Review & Edit**: Users can review all sections and edit individual sections
5. **Final Submission**: Application status is updated to "SUBMITTED"

## Database Schema

The system creates the following tables:
- `loan_application` - Main application record
- `personal_details` - Personal information
- `employment_details` - Employment information
- `loan_details` - Loan requirements
- `document_details` - Document file paths
- `exiting_loan_details` - Existing loan information
- `reference_details` - Reference contacts

## Testing the Integration

1. Start the backend server
2. Start the frontend application
3. Navigate to `http://localhost:3000`
4. Fill out the loan application form
5. Check the database to verify data persistence

## Troubleshooting

### Common Issues:

1. **CORS Error**: Ensure WebConfig.java is properly configured
2. **Database Connection**: Verify MySQL is running and credentials are correct
3. **Port Conflicts**: Change server.port in application.properties if needed
4. **File Upload Issues**: Check multipart configuration in application.properties

### Debugging Tips:

1. Check browser console for frontend errors
2. Check backend logs for API errors
3. Use browser dev tools to inspect network requests
4. Verify database tables are created correctly

## Next Steps

1. Add file upload functionality for documents
2. Implement user authentication
3. Add application status tracking
4. Create admin dashboard
5. Add email notifications
6. Implement loan approval workflow

## Security Considerations

- Add input validation and sanitization
- Implement proper authentication and authorization
- Use HTTPS in production
- Validate file types and sizes for uploads
- Add rate limiting for API endpoints
